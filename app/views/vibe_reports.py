"""
Vibe reports API endpoints with role-based access control.
"""
from typing import List

from fastapi import APIRouter, Depends, HTTPException, status, Query
from sqlalchemy.orm import Session

from app.config.database import get_db
from app.controllers.vibe_report_controller import vibe_report_controller
from app.middlewares.rbac import (
    get_current_active_user,
    get_current_superuser,
    verify_user_or_superuser_access
)
from app.models.user import User
from app.schemas.vibe_report import VibeReport, VibeReportCreate, VibeReportUpdate

router = APIRouter()


@router.get("/me", response_model=List[VibeReport])
def get_my_vibe_reports(
    skip: int = Query(0, ge=0),
    limit: int = Query(100, ge=1, le=1000),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user),
):
    """
    Get current user's vibe reports.
    
    Employee access: ✅ Own reports only
    Admin access: ✅ Own reports only (when using this endpoint)
    """
    return vibe_report_controller.get_by_user_id(
        db=db, 
        user_id=current_user.id, 
        skip=skip, 
        limit=limit
    )


@router.get("/user/{user_id}", response_model=List[VibeReport])
def get_user_vibe_reports(
    user_id: int,
    skip: int = Query(0, ge=0),
    limit: int = Query(100, ge=1, le=1000),
    db: Session = Depends(get_db),
    current_user: User = Depends(verify_user_or_superuser_access),
):
    """
    Get vibe reports for a specific user.
    
    Employee access: ✅ Own reports only (user_id must match current user)
    Admin access: ✅ Any user's reports
    """
    return vibe_report_controller.get_by_user_id(
        db=db, 
        user_id=user_id, 
        skip=skip, 
        limit=limit
    )


@router.get("/all", response_model=List[VibeReport])
def get_all_vibe_reports(
    skip: int = Query(0, ge=0),
    limit: int = Query(100, ge=1, le=1000),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_superuser),
):
    """
    Get all vibe reports from all users.
    
    Employee access: ❌ Forbidden
    Admin access: ✅ All users' reports
    """
    return vibe_report_controller.get_all_reports(
        db=db, 
        skip=skip, 
        limit=limit
    )


@router.post("/", response_model=VibeReport)
def create_vibe_report(
    vibe_report_in: VibeReportCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user),
):
    """
    Create a new vibe report.
    
    Employee access: ❌ Forbidden (reports are typically AI-generated by admins)
    Admin access: ✅ Create reports for any user
    """
    if not current_user.is_superuser:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Only superusers can create vibe reports"
        )
    
    return vibe_report_controller.create_for_user(
        db=db,
        obj_in=vibe_report_in,
        generated_by_user_id=current_user.id
    )


@router.get("/{vibe_report_id}", response_model=VibeReport)
def get_vibe_report(
    vibe_report_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user),
):
    """
    Get a specific vibe report by ID.
    
    Employee access: ✅ Own reports only
    Admin access: ✅ Any report
    """
    vibe_report = vibe_report_controller.get(db=db, id=vibe_report_id)
    if not vibe_report:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Vibe report not found"
        )
    
    # Check access permissions
    if not current_user.is_superuser and vibe_report.user_id != current_user.id:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Not enough permissions to access this vibe report"
        )
    
    return vibe_report


@router.put("/{vibe_report_id}", response_model=VibeReport)
def update_vibe_report(
    vibe_report_id: int,
    vibe_report_update: VibeReportUpdate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_superuser),
):
    """
    Update a vibe report.
    
    Employee access: ❌ Forbidden
    Admin access: ✅ Any report
    """
    vibe_report = vibe_report_controller.get(db=db, id=vibe_report_id)
    if not vibe_report:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Vibe report not found"
        )
    
    return vibe_report_controller.update(
        db=db,
        db_obj=vibe_report,
        obj_in=vibe_report_update
    )


@router.delete("/{vibe_report_id}", response_model=VibeReport)
def delete_vibe_report(
    vibe_report_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_superuser),
):
    """
    Delete a vibe report.
    
    Employee access: ❌ Forbidden
    Admin access: ✅ Any report
    """
    vibe_report = vibe_report_controller.get(db=db, id=vibe_report_id)
    if not vibe_report:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Vibe report not found"
        )
    
    return vibe_report_controller.remove(db=db, id=vibe_report_id)
